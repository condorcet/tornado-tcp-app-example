Пример построения клиент-серверного приложения на базе фреймворка Torando


Зависимости:
- python 3.5
- Tornado 4.4.2 (рекомендуется использовать выше 4)


Установка:

0. Виртуальное окружение (опционально, но рекомендуется)
> virtualenv env
> source env/bin/activate

1. Установить Tornado
> pip install tornado

2. Склонировать репозитарий
> git clone <url>

### Сервер ###

Для запуска сервера:
 > python start.py --type=server

Дополнительно можно настроить порт для подключения источников (sources) и слушателей (listeners).
Для этого введите используйте параметр `port` в следующем формате --port=<source_port>,<listener_port>


### Источник ###

Для запуска источника:
 > python start.py --type=source --sid=<source_id>
, где source_id - символьный идентификатор источника (максимум 8 символов)

Порт подключения указывается параметром `port`, по-умолчанию равный 8888

В настоящий момент источник поддерживает следующие команды:
`status <status_code>` - изменить статус текущего источника. Доступные значения будут показаны при вызове команды.
`send` - отправить сообщение серверу. При формировании сообщения используются текущий статус источника и отправляемые данные (нагрзука), ввод которых будет предложен после вызова команды.
После каждого сообщения приходит ответ с подтверждением полученного сообщения.


### Слушатель ###

Для запуска слушателя:
 > python start.py --type=listener
 Для указания порта подключения используйте `port`, по-умолчанию равный 8888.


Структура проекта:
/base - директория содержит абстрактные и базовые классы
 - tests/ - директория с unit-тестами
 - source.py - классы источников
 - message.py - классы сообщений
 - listener.py - класс слушателя
 - server.py - класс сервера на основе TCPServer Tornado
 - exceptions.py - исключения
/app - реализация серверной и клиентской части в рамках поставленной задачи
 - app_server.py - реализация серверной части приложения
 - app_client.py - реализация клиентских source и listener
- start.py - оболочка для запуска приложений сервера/клиента

